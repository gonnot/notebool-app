################################################org.bool.block.RunCodeBlock

################################################org.bool.block.MarkDownBlock
https://medium.com/programmers-blockchain/create-simple-blockchain-java-tutorial-from-scratch-6eeed3cb03fa
################################################org.bool.block.RunCodeBlock
public class StringUtil {

	public String applySha256(String input){		
		try {
			MessageDigest digest = MessageDigest.getInstance("SHA-256");	        
			//Applies sha256 to our input, 
			byte[] hash = digest.digest(input.getBytes("UTF-8"));	        
			StringBuffer hexString = new StringBuffer(); 
			for (int i = 0; i < hash.length; i++) {
				String hex = Integer.toHexString(0xff & hash[i]);
				if(hex.length() == 1) hexString.append('0');
				hexString.append(hex);
			}
			return hexString.toString();
		}
		catch(Exception e) {
			throw new RuntimeException(e);
		}
	}	
}
################################################org.bool.block.RunCodeBlock
import java.security.MessageDigest;
import java.util.Date;
import java.util.ArrayList;
################################################org.bool.block.RunCodeBlock
public class Block {

	public String hash;
	public String previousHash;
	private String data; 
	private long timeStamp; 

public String calculateHash() {
	String calculatedhash = new StringUtil().applySha256( 
			previousHash +
			Long.toString(timeStamp) +
			data 
			);
	return calculatedhash;
}

public Block(String data,String previousHash ) {
		this.data = data;
		this.previousHash = previousHash;
		this.timeStamp = new Date().getTime();
                this.hash = calculateHash();
		
	}
}
################################################org.bool.block.RunCodeBlock
public ArrayList<Block> blockchain = new ArrayList<Block>();
################################################org.bool.block.RunCodeBlock
blockchain.add(new Block("Hi im the first block", "0"));		
blockchain.add(new Block("Yo im the second block",blockchain.get(blockchain.size()-1).hash)); 
blockchain.add(new Block("Hey im the third block",blockchain.get(blockchain.size()-1).hash));
################################################org.bool.block.MavenDependencyBlock
com.google.code.gson:gson:jar:2.3.1
################################################org.bool.block.RunCodeBlock
import com.google.gson.GsonBuilder;
################################################org.bool.block.RunCodeBlock
String blockchainJson = new GsonBuilder().setPrettyPrinting().create().toJson(blockchain);
################################################org.bool.block.RunCodeBlock
blockchainJson
################################################org.bool.block.RunCodeBlock
public Boolean isChainValid() {
	Block currentBlock; 
	Block previousBlock;
	
	//loop through blockchain to check hashes:
	for(int i=1; i < blockchain.size(); i++) {
		currentBlock = blockchain.get(i);
		previousBlock = blockchain.get(i-1);
		//compare registered hash and calculated hash:
		if(!currentBlock.hash.equals(currentBlock.calculateHash()) ){
			System.out.println("Current Hashes not equal");			
			return false;
		}
		//compare previous hash and registered previous hash
		if(!previousBlock.hash.equals(currentBlock.previousHash) ) {
			System.out.println("Previous Hashes not equal");
			return false;
		}
	}
	return true;
}
################################################org.bool.block.RunCodeBlock
isChainValid()
################################################END
